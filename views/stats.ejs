<%
const { escape: esc } = _;

const rarityOrder = ['special', 'supreme', 'mythic', 'legendary', 'epic', 'rare', 'uncommon', 'common'];
const slayerOrder = ['zombie', 'spider', 'wolf', 'enderman'];
const badgeOrder = ['gold', 'silver', 'bronze'];

const allItems = items.armor.concat(items.inventory, items.enderchest, items.talisman_bag, items.fishing_bag, items.quiver, items.potion_bag, items.wardrobe_inventory, items.storage);

const UNIQUE_ACCESSORIES = calculated.talismanCount;

const statSuffix = {
  bonus_attack_speed: '%',
  crit_chance: '%',
  crit_damage: '%',
  sea_creature_chance: '%',
  speed: '%',
};

const statShort = {
  ability_damage: 'AD',
  bonus_attack_speed: 'Atk',
  crit_chance: 'CC',
  crit_damage: 'CD',
  damage_increase: 'DmgInc',
  damage: 'Dmg',
  defense: 'Def',
  effective_health: 'EHP',
  farming_fortune: 'FrmFrt',
  ferocity: 'Frc',
  foraging_fortune: 'FrgFrt',
  health: 'HP',
  intelligence: 'Int',
  magic_find: 'MF',
  mining_fortune: 'MngFrt',
  mining_speed: 'MngSpd',
  pet_luck: 'PL',
  pristine: 'Prs',
  sea_creature_chance: 'ScC',
  speed: 'Spd',
  strength: 'Str',
};

function getPrettyName(statName, shorten = false) {
  switch (statName) {
    case 'bonus_attack_speed':
      return 'Attack Speed';
    case 'sea_creature_chance':
      return shorten ? '<abbr title="Sea Creature">SC</abbr> Chance' : 'Sea Creature Chance';
    default:
      return helper.titleCase(statName.replace(/\_/g, " "));
  }
}

const skillItems = {
  farming: 'icon-294_0',
  mining: 'icon-274_0',
  combat: 'icon-272_0',
  foraging: 'icon-6_3',
  fishing: 'icon-346_0',
  enchanting: 'icon-116_0',
  alchemy: 'icon-379_0',
  carpentry: 'icon-58_0',
  runecrafting: 'icon-378_0'
};

const MAX_MAGIC_FIND = 2.00;

const romanize = num => {
	if (!+num)
		return false;
	var	digits = String(+num).split(""),
		key = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM",
		     "","X","XX","XXX","XL","L","LX","LXX","LXXX","XC",
		     "","I","II","III","IV","V","VI","VII","VIII","IX"],
		roman = "",
		i = 3;
	while (i--)
		roman = (key[+digits.pop() + (i * 10)] || "") + roman;
	return Array(+digits.join("") + 1).join("M") + roman;
};

const slayerInfo = {
  zombie: {
    boss: 'Revenant Horror',
    head: '/head/1fc0184473fe882d2895ce7cbc8197bd40ff70bf10d3745de97b6c2a9c5fc78f',
  },
  spider: {
    boss: 'Tarantula Broodfather',
    head: '/head/9d7e3b19ac4f3dee9c5677c135333b9d35a7f568b63d1ef4ada4b068b5a25',
  },
  wolf: {
    boss: 'Sven Packmaster',
    head: '/head/f83a2aa9d3734b919ac24c9659e5e0f86ecafbf64d4788cfa433bbec189e8',
  },
  enderman: {
    boss: 'Voidgloom Seraph',
    head: '/head/1b09a3752510e914b0bdc9096b392bb359f7a8e8a9566a02e7f66faff8d6f89e',
  }
};

const seaCreatures = [
  'pond_squid',
  'sea_walker',
  'night_squid',
  'frozen_steve',
  'nurse_shark',
  'sea_guardian',
  'frosty_the_snowman',
  'sea_witch',
  'scarecrow',
  'sea_archer',
  'blue_shark',
  'monster_of_the_deep',
  'grinch',
  'catfish',
  'nightmare',
  'carrot_king',
  'sea_leech',
  'werewolf',
  'guardian_defender',
  'deep_sea_protector',
  'tiger_shark',
  'water_hydra',
  'sea_emperor',
  'phantom_fisherman',
  'great_white_shark',
  'yeti',
  'grim_reaper',
];

const milestone_rarities = ['common', 'uncommon', 'rare', 'epic', 'legendary'];
const pet_milestones = {
  'sea_creatures_killed': [ 250, 1000, 2500, 5000, 10000],
  'ores_mined': [2500, 7500, 20000, 100000, 250000]
};

getStats = items => {
  const stats = Object.assign({}, constants.stat_template);

  for(const item of items){
    if(!('stats') in item)
      continue;

    for(const stat in item.stats){
      if(!(stat in stats))
        continue;

      stats[stat] += item.stats[stat];
    }
  }

  for(const stat in stats)
    stats[stat] = Math.round(stats[stat]);

  return stats;
}

const getBonus = stats => {
  const statsNotZero = Object.keys(stats).filter((a) => stats[a] > 0 && a != "effective_health");

  if (statsNotZero.length == 0) {
    return "";
  } else {
    return /*html*/`
      <span class="stat-name">Bonus: </span>
      <span class="stat-value">
      ${
        statsNotZero.map( (stat) =>
          /*html*/`<span class="color-${ stat.replace(/\_/g, "-") }">
            ${ stats[stat].toLocaleString() }${ statSuffix[stat] ?? "" } <abbr title="${ getPrettyName(stat) }">${ statShort[stat] }</abbr>
          </span>`
        ).join(/*html*/`<span class="bonus-divider" role="separator"> // </span>`)
      }
      </span>
    `;
  }
};

const formatReforge = (string) => {
  let reforge = string.split('_').join(' ').trim()
  reforge = reforge.charAt(0).toUpperCase() + reforge.slice(1)
  return reforge
}

const getReforges = (accessories) => {
  const rarityReforgeCounts = {}

  accessories.forEach(acc => {
    const rarity = acc.rarity
    const reforge = acc.reforge || 'missing_reforge!'

    if (!rarityReforgeCounts[rarity]) {
      rarityReforgeCounts[rarity] = {}
    }
    if (!rarityReforgeCounts[rarity][reforge]) {
      rarityReforgeCounts[rarity][reforge] = 0
    }
    rarityReforgeCounts[rarity][reforge] += 1
  })

  return /*html*/`
    <span class="stat-name">Reforges: </span>
    <span class="stat-value">
    ${
      Object.entries(rarityReforgeCounts).map( ([rarity, reforges]) => {
        return Object.entries(reforges).map( ([reforge, amount]) => {
          return /*html*/`<span class="piece-${ rarity }-fg">${ amount }× ${ formatReforge(reforge) }</span>`;
        }).join(/*html*/`<span class="bonus-divider">, </span>`)
      }).join(/*html*/`<span class="bonus-divider" role="separator"> // </span>`)
    }
    </span>
  `;
}

const formatEnrichment = (string) => {
  let enrichment = string.split('_').join(' ').trim()
  enrichment = helper.titleCase(enrichment)
  return enrichment
}

const enrichmentToStatName = (enrichment) => {
  switch (enrichment.toLowerCase()) {
    case 'walk_speed':
      return 'speed'

    case 'critical_chance':
      return 'crit_chance'

    case 'critical_damage':
      return 'crit_damage'

    default:
      return enrichment.toLowerCase()
  }
}

const getEnrichments = (accessories) => {
  const enrichmentCounts = {}
  const filteredAccessories = accessories
    .filter(acc => ['legendary', 'mythic'].includes(acc.rarity.toLowerCase()))

  if (filteredAccessories.length > 0) {
    filteredAccessories.forEach(acc => {
      const enrichment = acc.enrichment || 'missing_enrichment!'

      if (!enrichmentCounts[enrichment]) {
        enrichmentCounts[enrichment] = 0
      }
      enrichmentCounts[enrichment] += 1
    })

    return /*html*/`
    <span class="stat-name">Enrichments: </span>
    ${
      Object.entries(enrichmentCounts).map(([enrichment, amount]) => {
        return /*html*/`
          <span class="stat-value color-${enrichmentToStatName(enrichment).replace(/\_/g, "-")}">
            ${amount}× ${formatEnrichment(enrichment)}
          </span>
        `
      }).join(/*html*/`<span class="bonus-divider" role="separator"> // </span>`)
    }
    <br>
    `;
  }
}

const isEnchanted = item => {

  // heads
  if ([397].includes(item.id)) {
    return false;
  }

  // enchanted book, bottle o' enchanting, nether star
  if ([403, 384, 399].includes(item.id)) {
    return true;
  }

  //potions potions with actual effects (not water bottles)
  if (item.id === 373 && item.Damage !== 0) {
    return true;
  }

  if ("tag" in item && Array.isArray(item.tag.ench)) {
    return true;
  }

  return false;

};

const itemIcon = (item, classes) => {
    classes.push("item-icon");
  if (isEnchanted(item)) {
    classes.push("is-enchanted");
  }
  if (item.texture_path) {
    classes.push("custom-icon");
    return /*html*/`
      <div style='background-image: url("${esc(item.texture_path)}")' class="${esc(classes.join(" "))}"></div>
    `;
  } else {
    if (item.Damage != 0) {
      classes.push(`icon-${item.id}_0`);
    }
    classes.push(`icon-${item.id}_${item.Damage}`);
    return /*html*/`
      <div class="${esc(classes.join(" "))}"></div>
    `;
  }
};

const inventorySlot = item => /*html*/`
  <div class="inventory-slot">
    ${
      Object.keys(item).length > 2
      ? /*html*/`
        <div class="rich-item inventory-item" data-item-id="${esc( item.itemId )}" data-item-index="${esc( item.item_index )}">
          ${itemIcon(item, ['piece-icon'])}
          ${item.Count != 1 ? /*html*/`<div class="item-count">${esc( item.Count )}</div>` : ""}
        </div>
      `
      : ""
    }
  </div>
`;

const skill_component = (skill, icon, level, extra = {}) => /*html*/`
  <div class="skill xp-skill${esc(level.level == level.maxLevel ? ' maxed-skill' : '')}">
    <div class="skill-icon" ${(level.rank && level.rank < 50000) ? /*html*/`
      data-tippy-content="<span class='stat-name'>Rank: </span><span class='stat-value'></span>#${esc( level.rank )}</span>"
    ` : ""}>
      ${
        icon.startsWith('head-')
        ? /*html*/`<div class="item-icon custom-icon" style="background-image:url(/head/${esc( icon.substring(5) )})"></div>`
        : /*html*/`<div class="item-icon ${esc( icon )}"></div>`
      }
      ${level.level == level.maxLevel ? /*html*/`<div class="piece-shine"></div>` : ""}
    </div>
    <div class="skill-name">${esc( skill )} <span class="skill-level">${esc( level.level >= 0 ? level.level : '?' )}</span></div>
    <div class="skill-bar" data-skill="${esc( skill )}">
      <div class="skill-progress-bar" style="--progress: ${esc( level.level == level.levelCap ? 1 : level.progress )}"></div>
      ${
        'runecrafting' in calculated.levels
        ? /*html*/`
          <div class="skill-progress-text" data-hover-text="${esc( level.xpCurrent.toLocaleString() )}${level.xpForNext != Infinity ? "/" + esc(level.xpForNext.toLocaleString()) : ""} XP">
            ${esc( helper.formatNumber(level.xpCurrent, true) )}${level.xpForNext != Infinity ? " / " + esc(helper.formatNumber(level.xpForNext)) : ""} XP
          </div>
        `
        : ""
      }
    </div>
  </div>
`;

const stat_component = (stat) => {
  const bonusStats = stats[stat.name] - calculated.base_stats[stat.name]
  const tippyContent = /*html*/`
    <span class='stat-name'>Base ${esc( getPrettyName(stat.name) )}: </span><span class='stat-value${stat.percent ? ' percent' : ''}'>${ calculated.base_stats[stat.name].toLocaleString() }</span>
    <div class='tippy-explanation'>${stat.baseExplanation ? esc(stat.baseExplanation) : ""}</div><br>
    <span class='stat-name'>Bonus ${esc( getPrettyName(stat.name) )}: </span><span class='stat-value${stat.percent ? ' percent' : ''}'>${ bonusStats > 0 ? '+' : '' }${ bonusStats.toLocaleString() }</span>
    <div class='tippy-explanation'>Additional bonuses from Armor, held items, Accessories and active Pets.</div>
    ${
      Array.isArray(stat.extraStats)
      ? stat.extraStats.map(extraStat => /*html*/`
        <br><span class='stat-name'>${esc( extraStat.stat )}: </span><span class='stat-value${ extraStat.percent ? ' percent' : ''}'>${ extraStat.value.toLocaleString() }</span>
        <div class='tippy-explanation'>${stat.baseExplanation ? esc(extraStat.explanation) : ""}</div>
      `).join("")
      : ""
    }
  `;
  return /*html*/`
    <div data-stat="${esc( stat.name )}" class="basic-stat stat-${esc( stat.name.replace(/\_/g, "-") )}">
      <span data-tippy-content="${tippyContent}"><span class="stat-name">${ getPrettyName(stat.name, true) } </span><span class="stat-value${stat.percent ? ' percent' : ''}">${ stats[stat.name].toLocaleString() }</span></span>
    </div>
  `;
};

let description = "";

if('levels' in calculated){
  let stats = calculated.stats;

  if(items.highest_rarity_sword)
    stats = calculated.weapon_stats[items.highest_rarity_sword.itemId];

  description += `❤️ ${stats.health} 🛡️ ${stats.defense} 💪 ${stats.strength} 🌀 ${stats.crit_chance}% ☠️ ${stats.crit_damage}%\n\n`;
}

description += `🧚 ${calculated.fairy_souls.collected}/${calculated.fairy_souls.total} Fairy Souls\n`;

if(items.armor_set)
  description += `🛡️ ${items.armor_set}\n`;

let highestRaritySword;

if(items.highest_rarity_sword){
  highestRaritySword = items.highest_rarity_sword.display_name;
  if(items.highest_rarity_sword.tag.ExtraAttributes.id == 'MIDAS_SWORD')
    highestRaritySword = highestRaritySword.replace("Midas", `${helper.formatNumber(items.highest_rarity_sword.tag.ExtraAttributes.winning_bid, true, 1)} Midas`);

  description += `🗡️ ${highestRaritySword}\n`;
 }

const skillEmojis = {
  "alchemy": "⚗️",
  "carpentry": "🪑",
  "combat": "⚔️",
  "enchanting": "🔮",
  "farming": "🌾",
  "fishing": "🎣",
  "foraging": "🌳",
  "mining": "⛏️",
  "runecrafting": "✨",
  "taming": "🦴"
};

const slayerEmojis = {
  zombie: "🧟",
  spider: "🕸️",
  wolf: "🐺",
  enderman: "🔮"
};

if('levels' in calculated){
  let { levels } = calculated;

  let skillsSorted = Object.keys(levels).sort((a, b) =>
    (levels[b].level + levels[b].progress) - (levels[a].level + levels[a].progress)
  );

  const skillAmount = calculated.pets.filter(a => a.active).length >= 1 ? 1 : 2;

  for(let i = 0; i < skillAmount; i++){
    const skill = skillsSorted[i];
    const skillName = skill.charAt(0).toUpperCase() + skill.slice(1);

    if(levels[skill].level == 0)
      break;

    description += `${skillEmojis[skill]} ${skillName} ${levels[skill].level}\n`;
  }
}

if(calculated.pets.filter(a => a.active).length >= 1){
  const activePet = calculated.pets.find(a => a.active);

  description += `${activePet.emoji} ${helper.titleCase(activePet.rarity)} ${activePet.display_name} (Lvl ${activePet.level.level})\n`;
}

description += '\n';

if(calculated.slayer_coins_spent.total > 0){
  description += '🤺 Slayer: ';

  for(const slayer of slayerOrder){
    if(!calculated.slayers[slayer])
      continue;

    const slayerInfo = calculated.slayers[slayer];
    description += `${slayerEmojis[slayer]} ${slayerInfo.level.currentLevel}  `;
  }

  description += '\n\n';
}

if(calculated.average_level)
  description += `⚒ Avg Skill Level: ${Math.floor(calculated.average_level * 10) / 10} `;

if(calculated.weight)
  description += `💪 Weight: ${Math.floor(calculated.weight * 10) / 10} `;

description += `💰 Purse: ${helper.formatNumber(calculated.purse, true)} Coins `;

if(calculated.bank)
  description += `\n🏦 Bank Account: ${helper.formatNumber(calculated.bank, true)} Coin${Math.floor(calculated.bank) == 1 ? '': 's'}`;

let metaDescription = `${calculated.display_name} has been playing SkyBlock for ${moment(calculated.first_join.unix).fromNow(true)}`;

if(items.armor_set){
  if(highestRaritySword)
    metaDescription += `, is wearing ${items.armor_set}`;
  else
    metaDescription += ` and is wearing ${items.armor_set}`;
}

if(highestRaritySword){
  if(items.armor_set)
    metaDescription += ` and fighting with ${helper.aOrAn(highestRaritySword)} ${highestRaritySword}`;
  else
    metaDescription += ` and is fighting with ${helper.aOrAn(highestRaritySword)} ${highestRaritySword}`;
}

metaDescription += '.';

let metaTitle = calculated.display_name;

if(calculated.display_emoji){
  metaTitle += calculated.display_emoji;
}

if(calculated.profile.game_mode == 'ironman'){
  metaTitle += ` (${calculated.profile.cute_name}♻️)`;
} else {
  metaTitle +=  ` (${calculated.profile.cute_name})`;
}

function jerriefy(rank) {
  if (extra.isFoolsDay) {
    rank = rank.replace("VIP", "JER");
    rank = rank.replace("MVP", "JRY");
    rank = rank.replace("HELPER", "JERRY");
    rank = rank.replace("MOD", "JERRY");
    rank = rank.replace("PIG", "JERRY");
    rank = rank.replace("ADMIN", "SR JERRY");
    rank = rank.replace("YOUTUBE", "YERRY");
  }
  return rank;
}

const getRarityUpgradeClass = item => {
  let upgrades = 0

  upgrades += item.extra?.recombobulated ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TIER_BOOST' ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_VAMPIRE_FANG' ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TOY_JERRY' ? 1 : 0

  return `piece-rarity-upgrade-${upgrades}`
}

/** @type {{ id: string, name: string, type: "copy" | "url" }[]} */
const socials = [
  {
    id: "DISCORD",
    name: "Discord",
    type: "copy",
  },
  {
    id: "TWITTER",
    name: "Twitter",
    type: "url",
  },
  {
    id: "YOUTUBE",
    name: "YouTube",
    type: "url",
  },
  {
    id: "INSTAGRAM",
    name: "Instagram",
    type: "url",
  },
  {
    id: "TWITCH",
    name: "Twitch",
    type: "url",
  },
  {
    id: "HYPIXEL",
    name: "Hypixel Forums",
    type: "url",
  },
]


let stats = Object.assign({}, calculated.stats);
let sword = items.weapons.slice().sort((a, b) => a.item_index - b.item_index);
let rod = items.rods.slice().sort((a, b) => a.item_index - b.item_index);

if(items.highest_rarity_sword)
  sword = [items.highest_rarity_sword];

if(items.highest_rarity_rod)
  rod = [items.highest_rarity_rod];

if(sword.length > 0)
  stats = calculated.weapon_stats[sword[0].itemId];

if(rod.length > 0)
  stats['sea_creature_chance'] = calculated.weapon_stats[rod[0].itemId]['sea_creature_chance'];

%>
<!DOCTYPE html>
<html lang="en">
<%- /*html*/`
<head>
  <title>${esc( calculated.display_name)} ${esc( calculated.display_emoji ?? "" )} | SkyCrypt</title>
  <meta name="description" content="${esc( metaDescription )}">
  <link rel="icon" href="https://crafatar.com/avatars/${ extra.isFoolsDay ? 'bd482739767c45dca1f8c33c40530952' : calculated.uuid }?size=32&overlay" sizes="32x32" type="image/png">
  <meta property="og:type" content="profile">
  <meta property="og:title" content="${esc(metaTitle)}">
  <meta property="og:image" content="https://crafatar.com/avatars/${esc(calculated.uuid)}?size=512&overlay">
  <meta property="og:description" content="${esc(description)}">
  <meta property="og:profile:username" content="${esc(calculated.display_name)}">
  <meta name="twitter:card" content="summary">
  ${resources}
</head>
` %>
<body class="page-stats">
  <%- /*html*/`
  <svg xmlns="http://www.w3.org/2000/svg" height="0" width="0" style="position: fixed;">
    <filter id="enchanted-glint">
      <feImage href="/resources/img/enchanted-glint.png" />
      <feComposite in2="SourceGraphic" operator="in" />
      <feBlend in="SourceGraphic" mode="screen" />
    </filter>
  </svg>
  ${ header }
  <div id="dimmer">
    <video preload="none" id="enable_api" loop>
      <source type="video/webm" src="/resources/video/enable-api.webm">
      <source type="video/mp4" src="/resources/video/enable-api.mp4">
    </video>
  </div>
  <div id="stats_content">
    <div class="item-name">
      <div></div><span></span><button class="close-lore" aria-label="Close"></button></div>
    <div class="item-lore"></div>
    <div class="backpack-contents inventory-view"></div>
  </div>
  <div id="skin_display">
    <div id="player_model"></div>
  </div>
  ` %>
  <main id="wrapper" data-sticky-container>
    <%- /*html*/`
    ${
      extra.cacheOnly
      ? /*html*/`
        <figure class="banner error">
          <figcaption>Cache Only Mode!</figcaption>
          <p>
            SkyCrypt is <strong>only</strong> showing the last known state of user's profiles which may be outdated due to API maintenance.<br>
            <!-- <i>If a profile wasn't viewed/cached before, it can't be viewed.</i><br> -->
            <br>
            For more info about Hypixel outages visit the official <a href="https://status.hypixel.net/" target="_blank" rel="noreferrer"> Hypixel Status</a>.
          </p>
        </figure>
      `
      : ""
    }
    <div id="player_profile"><span class="text-stats-for">Stats for</span>
      <span tabindex="0" id="stats_for_player">
        ${jerriefy(calculated.rank_prefix)}
        ${esc(calculated.display_name)}
        ${
          calculated.display_emoji_img
          ? /*html*/`<img class="emoji" draggable="false" src="${esc(calculated.display_emoji_img)}">`
          : calculated.display_emoji
            ? extra.twemoji.parse(calculated.display_emoji)
            : ""
        }
        <ul id="other_players">
          ${
            calculated.members.map(member => /*html*/`
              <li>
                <a class="goto" href="/stats/${esc(member.uuid)}/${esc(calculated.profile.profile_id)}${esc(Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '')}">
                  ${esc(member.display_name)}
                  ${
                    member.emojiImg
                    ? /*html*/`<img class="emoji" draggable="false" src="${esc(member.emojiImg)}">`
                    : member.emoji
                      ? extra.twemoji.parse(member.emoji)
                      : ""
                  }
                  <span class="goto-last-played">${esc(member.last_updated?.text ?? '')}</span>
                </a>
              </li>
            ` ).join("")
          }
        </ul>
      </span>
      <span class="text-on"> on </span>
      <span tabindex="0" id="stats_for_profile">
        ${esc(calculated.profile.cute_name)}
        ${calculated.profile.game_mode == 'ironman' ? /*html*/`<img src="/resources/img/icons/ironman.png" class="emoji" alt="ironman">` : "" }
        <ul id="other_profiles">
          ${
            Object.entries(calculated.profiles).map(([profile_id, _profile]) => /*html*/`
              <li>
                <a class="goto" href="/stats/${esc(calculated.uuid)}/${esc(_profile.profile_id)}${esc(Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '')}">
                  ${esc(_profile.cute_name)}
                  ${_profile.game_mode == 'ironman' ? /*html*/`<img src="/resources/img/icons/ironman.png" class="emoji">` : ""}
                  <span class="goto-last-played">${esc(_profile.last_updated?.text ?? '')}</span>
                </a>
              </li>
            `).join("")
          }
        </ul>
      </span>
      <div id="additional_player_stats">
        <button class="additional-player-stat svg-icon favorite" data-username="${esc(calculated.uuid)}" role="checkbox">
          <svg viewBox="0 0 24 24">
            <title>star</title>
            <path class="solid" fill="white" d="M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z" />
            <path class="outline" fill="white" d="M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z" />
          </svg>
        </button>
        ${
          calculated.guild
          ? /*html*/`
            <button class="additional-player-stat interactive-tooltip" data-tippy-content="
              ${calculated.guild.rank ? /*html*/`<span class='stat-name'>Rank: </span><span class='stat-value'>${esc( calculated.guild.rank )}</span><br><br>` : ""}
              <span class='stat-name'>Guild Master: </span>${calculated.guild.gm ? /*html*/`<a href='/stats/${esc( calculated.guild.gm )}' class='no-underline stat-value'>${esc( calculated.guild.gmUser.display_name )}</a>` : "None"}<br>
              ${calculated.guild.tag ? /*html*/`<span class='stat-name'>Tag: </span><span class='stat-value'>${ helper.renderLore('§f'+calculated.guild.tag) }</span><br>` : ""}
              ${calculated.guild.members ? /*html*/`<span class='stat-name'>Members: </span><span class='stat-value'>${esc( calculated.guild.members )}</span><br>` : ""}
              ${calculated.guild.level ? /*html*/`<span class='stat-name'>Level: </span><span class='stat-value'>${esc( calculated.guild.level )}</span><br>` : ""}
            ">Guild: ${esc(calculated.guild.name)}</button>
            `
          : ""
        }
        <a href="https://auctions.craftlink.xyz/players/${esc( calculated.uuid )}" target="_blank" rel="noreferrer" class="additional-player-stat external-link">HyAuctions</a>
        <a href="https://plancke.io/hypixel/player/stats/${esc( calculated.display_name )}" target="_blank" rel="noreferrer" class="additional-player-stat external-link">Plancke</a>
        <div id="additional_socials">
          <button data-copy-text="${esc( calculated.uuid )}" class="copy-text additional-player-stat">Copy UUID</button>
          ${
            socials.filter(social => social.id in calculated.social).map(social => {
              switch (social.type) {
                case "copy":
                  return /*html*/`
                    <button data-copy-text="${esc(calculated.social[social.id])}" class="additional-player-stat copy-text external-${social.id.toLowerCase()} external-icon">${esc(calculated.social[social.id])}</button>
                  `;
                case "url":
                  return /*html*/`
                    <a data-tippy-content="${social.name}" href="${esc(calculated.social[social.id])}" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-${social.id.toLowerCase()}"></a>
                  `;
              }
            }).join("")
          }
          <button class="additional-player-stat" id="reveal_socials" aria-label="reveal socials"></button>
        </div>
      </div>
    </div>
    <div id="basic_stats">

      <div id="skin_display_mobile"></div>

      <div id="base_stats_container">
        ${
        [
          {
            name: 'health',
            baseExplanation: "Increased by collecting Fairy Souls, leveling your Farming and Fishing skills and leveling up in Zombie or Wolf Slayer.",
          },
          {
            name: 'defense',
            baseExplanation: "Increased by collecting Fairy Souls and leveling your Mining skill.",
            extraStats: [
              {
                stat: 'Damage Reduction',
                value: (stats.defense / (stats.defense + 100) * 100).toFixed(1),
                percent: true
              },
              {
                stat: 'Effective Health',
                value: stats.effective_health,
                explanation: 'Effective Health based on Health + Defense.<br>→ Formula: Health * (1 + Defense / 100)'
              }
            ]
          },
          {
            name: 'strength',
            baseExplanation: "Increased by collecting Fairy Souls and leveling your Foraging skill."
          },
          {
            name: 'speed',
            percent: true,
            baseExplanation: "Increased by collecting Fairy Souls and leveling up in Wolf Slayer."
          },
          {
            name: 'crit_chance',
            percent: true,
            baseExplanation: "Increased by leveling your Combat skill and leveling up in Spider Slayer."
          },
          {
            name: 'crit_damage',
            percent: true,
            baseExplanation: "Increased by leveling up in Spider or Wolf Slayer."
          },
          {
            name: 'bonus_attack_speed',
            percent: true,
            baseExplanation: null
          },
          {
            name: 'intelligence',
            baseExplanation: "Increased by leveling your Enchanting and Alchemy skills and completing songs on Melody's Harp."
          },
          {
            name: 'sea_creature_chance',
            percent: true,
            baseExplanation: null
          },
          {
            name: 'magic_find',
            baseExplanation: "Increased by collecting unique pets with high rarities."
          },
          {
            name: 'pet_luck',
            baseExplanation: "Increased by leveling your Taming Skill."
          },
          {
            name: 'ferocity',
            baseExplanation: null,
            extraStats: [
              {
                stat: 'Base Extra Strikes',
                value: (stats.ferocity / 100).toFixed(0),
              },
              {
                stat: 'Chance for 1 more',
                value: stats.ferocity % 100,
                percent: true
              }
            ]
          },
          {
            name: 'ability_damage',
            percent: true,
            baseExplanation: "Increased by leveling your Enchanting Skill."
          },
          {
              name: 'mining_speed',
              baseExplanation: "Increase the speed of breaking mining blocks."
          },
          {
              name: 'mining_fortune',
              baseExplanation: "Mining Fortune is the chance to gain double drops from ores, with a chance for triple drops at values greater than 100."
          },
          {
              name: 'farming_fortune',
              baseExplanation: "Farming Fortune is the chance to gain double drops from crops, with a chance for triple drops at values greater than 100."
          },
          {
              name: 'foraging_fortune',
              baseExplanation: "Foraging Fortune is the chance to gain double drops from logs, with a chance for triple drops at values greater than 100."
          },
          {
              name: 'pristine',
              baseExplanation: "Pristine is the chance to increase the quality of a Gemstone when it's dropped."
          },
        ].map(stat_component).join("")
        }
      </div>

      <div id="additional_stats_container">
        ${
          calculated.current_area
          ? /*html*/`<div class="additional-stat"><span class="stat-name">${ calculated.current_area_updated ? 'Current' : 'Last' } Area: </span><span class="stat-value">${ calculated.current_area }</span></div>`
          : ""
        }
        <div class="additional-stat"><span data-tippy-content='Last updated on <local-time timestamp="${ calculated.last_updated.unix }"></local-time>'><span class="stat-name">Last Updated: </span><span class="stat-value">${ calculated.last_updated.text }</span></span></div>
        <div class="additional-stat"><span data-tippy-content='Joined on <local-time timestamp="${ calculated.first_join.unix }"></local-time>'><span class="stat-name">Joined: </span><span class="stat-value">${ calculated.first_join.text }</span></span></div>
        <div class="additional-stat"><span class="stat-name">Purse: </span><span class="stat-value">${ helper.formatNumber(calculated.purse, true) } Coin${ Math.floor(calculated.purse) == 1 ? '': 's' }</span></div>
        ${
          'bank' in calculated
          ? /*html*/`
            <div class="additional-stat"><span class="stat-name">Bank Account: </span><span class="stat-value">${ helper.formatNumber(calculated.bank, true) } Coin${ Math.floor(calculated.bank) == 1 ? '': 's' }</span></div>
          `
          : ""
        }
        ${
          ('levels' in calculated && 'runecrafting' in calculated.levels)
          ? /*html*/`
            <div class="additional-stat"><span data-tippy-content="${/*html*/`
              <span class='stat-name'>Total Skill XP: </span><span class='stat-value'>${Math.round(calculated.total_skill_xp).toLocaleString()}</span>
              <div class='tippy-explanation'>Total XP gained in all skills except Carpentry and Runecrafting.</div>
              <span class='stat-name'>Average Level: </span><span class='stat-value'>${calculated.average_level.toFixed(2)}</span>
              <div class='tippy-explanation'>Average skill level over all skills except Carpentry and Runecrafting${('runecrafting' in calculated.levels) ? /*html*/`, includes progress to next level` : ""}.</div>
              ${
                'runecrafting' in calculated.levels
                ? /*html*/`
                  <span class='stat-name'>Average Level without progress: </span><span class='stat-value'>${ calculated.average_level_no_progress.toFixed(2) }</span>
                  <div class='tippy-explanation'>Average skill level without including partial level progress.</div>
                `
                : ""
              }
            `}">
              <span class="stat-name">Average Skill Level: </span><span class="stat-value">${ calculated.average_level.toFixed(2) }</span></span>
            </div>
          `
          : ""
        }
        <div class="additional-stat">
          <span class="stat-name">Fairy Souls: </span><span class="stat-value">${ calculated.fairy_souls.collected } / ${ calculated.fairy_souls.total }</span>
        </div>
        <div class="additional-stat">
          <span data-tippy-content="${/*html*/`
            ${
              [["Skill", calculated.skillWeight],["Slayer", calculated.slayerWeight],["Dungeon", calculated.dungeonsWeight]].map(([name, value]) => /*html*/`
                <span class='stat-name'>${name} Weight: </span><span class='stat-value'>${ value >= 0 ? parseFloat(value.toFixed(2)).toLocaleString() : /*html*/`Error` }</span><br/>
              `).join("")
            }
            <br/>
            <div class='tippy-explanation'>Weight calculations provided by Senither</div>
          `}">
            <span class="stat-name">Senither Weight: </span>
            <span class="stat-value">${ parseFloat(calculated.weight.toFixed(2)).toLocaleString() }</span>${
              (!calculated.skillWeight || !calculated.slayerWeight || !calculated.dungeonsWeight)
              ? /*html*/`<span class="stat-value stat-error">!</span>`
              : ''
          }</span>
        </div>
      </div>

      <div id="skill_levels_container">
        ${
          'levels' in calculated
          ? /*html*/`
            <div id="other_skills" class="skill-bars" data-api-enabled="${ 'runecrafting' in calculated.levels }">
              ${
                [
                  ['Taming', 'icon-383_0', calculated.levels.taming],
                  ['Farming', 'icon-294_0', calculated.levels.farming],
                  ['Mining', 'icon-274_0', calculated.levels.mining],
                  ['Combat', 'icon-272_0', calculated.levels.combat],
                  ['Foraging', 'icon-6_3', calculated.levels.foraging],
                  ['Fishing', 'icon-346_0', calculated.levels.fishing],
                  ['Enchanting', 'icon-116_0', calculated.levels.enchanting],
                  ['Alchemy', 'icon-379_0', calculated.levels.alchemy],
                ].map(args => skill_component(...args)).join("")
              }
              ${
                'runecrafting' in calculated.levels
                ? skill_component('Carpentry', 'icon-58_0', calculated.levels.carpentry) + skill_component('Runecrafting', 'icon-378_0', calculated.levels.runecrafting)
                : /*html*/`<div class="no-access">Skills from achievements across profiles. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">Enable Skills API</a> for more accurate data.</div>`
              }
            </div>
            <button id="show_skills">Show skills</button>
          `
          : /*html*/`
            <div class="no-access">${esc(calculated.display_name)} doesn't have skills access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
          `
        }
      </div>
    </div>
    <div id="nav_bar">
      <div id="nav_bar_line"></div>
      <div id="nav_bar_background"></div>
      <div id="nav_items_container">
        ${
          [
            {id: "Armor", text: "Armor"},
            {id: "Weapons", text: "Weapons", hidden: items.no_inventory},
            {id: "Accessories", text: "Accessories", hidden: items.no_inventory},
            {id: "Pets", text: "Pets", hidden: !calculated.pets.length > 0},
            {id: "Inventory", text: "Inventory", hidden: items.no_inventory},
            {id: "Skills", text: "Skills"},
            {id: "Dungeons", text: "Dungeons"},
            {id: "Slayer", text: "Slayer"},
            {id: "Minions", text: "Minions"},
            {id: "Collections", text: "Collections", hidden: !Object.keys(calculated.collections).length > 0},
            {id: "Misc", text: /*html*/`<abbr title="Miscellaneous">Misc</abbr>`, hidden: !Object.keys(calculated.misc).length > 0},
          ].filter(link => !link.hidden).map(link => {
            return/*html*/`<a class="nav-item" href="#${link.id}">${link.text}</a>`;
          }).join("")
        }
      </div>
    </div>
    ` %>
    <div class="stat-containers">
    <%
      const notAvailable = [];

      if(items.no_inventory)
        notAvailable.push('Weapons', 'Accessories', 'Inventory', 'Storage');

      if(items.no_personal_vault)
        notAvailable.push('Personal Vault');

      if(Object.keys(calculated.collections).length == 0)
        notAvailable.push('Collections');

      const localizedItems = allItems.some(a => a.localized === true);
    %>
    <% if(notAvailable.length > 0 || localizedItems || calculated.profile.game_mode == 'ironman'){ %>
      <div class="stat-container info-container-wrapper">
        <div class="info-container">
          <div class="info-header">Notice</div>
          <% if(notAvailable.length > 0){ %>
            <%= notAvailable.join(', ') %> not available for <%= calculated.display_name %> due to limited API access.<br><span><a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</span>
          <% } %>
          <% if(localizedItems){ %>
            <% if(notAvailable.length > 0){ %><br><br><% } %>
            This profile has non-english item data caused by the player's Hypixel language settings. Localization is not supported and some features of the site might not be working correctly.<br><br>
            This can be fixed by changing the language back to English in your ingame player settings, alternatively wait for Hypixel to change API behavior (<a target="_blank" href="https://github.com/HypixelDev/PublicAPI/issues/290">Related GitHub Issue</a>).<br><br>
            Please don't report bugs until this is resolved.
          <% } %>
          <% if(calculated.profile.game_mode == 'ironman'){ %>
            <% if(notAvailable.length > 0){ %><br><br><% } %>
            This is an <strong>Ironman</strong> profile. The player cannot use the Auction House, Bazaar, Trades, or pick up drops from other players.
          <% } %>
        </div>
      </div>
    <% } %>
    <div class="stat-container stat-armor">
      <a class="stat-anchor" id="Armor"></a>
      <h2 class="stat-header">Armor</h2>
      <div class="stat-content">
        <% if(items.armor.length == 0){ %>
          <div class="no-access"><%= calculated.display_name %> doesn't have any armor equipped.</div>
        <% }else{ %>
          <% if(items.armor_set) { %>
            <p class="stat-raw-values">
              <span class="stat-name">Set: </span><span class="stat-value piece-<%= items.armor_set_rarity %>-fg"><%= items.armor_set %></span>
            </p>
          <% } %>
          <div class="pieces">
            <% for(const item of items.armor.slice().reverse()){ %>
              <div tabindex="0" data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                  <div class="piece-shine"></div>
                <% } %>
                <%- itemIcon(item, ['piece-icon']); %>
              </div>
            <% } %>
          </div>
          <p>
            <%- getBonus(getStats(items.armor)) %>
          </p>
        <% } %>
        <% if(items.wardrobe.length > 0){ %>
          <p class="stat-sub-header">Wardrobe</p>
          <div class="pieces wardrobe">
          <% for(const set of items.wardrobe){ %>
            <div class="wardrobe-set">
              <% for(const [index, item] of set.entries()) { %>
                <% if (item) { %>
                  <div tabindex="0" data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %> index-<%= index %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
                <% } else { %>
                  <div class="piece armor-placeholder index-<%= index %>">
                    <div class="piece-icon item-icon custom-icon"></div>
                  </div>
                <% } %>
              <% } %>
            </div>
          <% } %>
        <% } %>
        </div>
      </div>
    </div>
    <% if(!items.no_inventory){ %>
      <div class="stat-container stat-weapons">
        <a class="stat-anchor" id="Weapons"></a>
        <h2 class="stat-header">Weapons</h2>
        <div class="stat-content">
          <% if(items.weapons.length == 0){ %>
            <div class="no-access"><%= calculated.display_name %> doesn't have any weapons.</div>
          <% }else{ %>
            <% if(items.highest_rarity_sword){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Weapon: </span><span class="stat-active-weapon stat-value piece-<%= items.highest_rarity_sword.rarity %>-fg"><%- items.highest_rarity_sword.display_name_print || items.highest_rarity_sword.display_name %></span>
            </p>
            <% }else if(items.weapons.length > 0){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Weapon: </span><span class="stat-active-weapon stat-value piece-common-fg">None</span>
            </p>
            <% } %>
            <div class="pieces">
              <%
                let sword = items.weapons.slice().sort((a, b) => a.item_index - b.item_index);

                if(items.highest_rarity_sword)
                  sword = [items.highest_rarity_sword];

                items.weapons.filter(a => !a.hidden).forEach(item => { %>
                  <div tabindex="0" <% if('backpackIndex' in item){ %>data-backpack-index="<%= item.backpackIndex %>" <% } %> data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>" class="rich-item piece
                    <% if(sword.length > 0 && item.backpackIndex === undefined && item.item_index == sword[0].item_index){ %>piece-selected<% } %>
                    piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <div class="select-weapon"></div>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
              <%
                });
              %>
            </div>
          <% } %>
        </div>
      </div>
      <div class="stat-container stat-accessories">
        <a class="stat-anchor" id="Accessories"></a>
        <h2 class="stat-header">Accessories</h2>
        <div class="stat-content">
          <% if(items.no_inventory){ %>
            <div class="no-access"><%= calculated.display_name %> doesn't have inventory access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
          <% }else if(items.talismans.length == 0){ %>
            <div class="no-access"><%= calculated.display_name %> doesn't have any accessories.</div>
          <% }else{ %>
            <p class="stat-raw-values">
              <%
                const maxTalis = items.talismans.filter(a => a.isUnique).length >= UNIQUE_ACCESSORIES ? 'golden-text': ''
                const maxRecombTalis = items.talismans.filter(a => a.isUnique && a.extra?.recombobulated).length >= UNIQUE_ACCESSORIES ? 'golden-text': ''
              %>

              <span class="stat-name <%= maxTalis %>">Unique Accessories: </span>
              <span class="stat-value <%= maxTalis %>"><%= items.talismans.filter(a => a.isUnique).length %> / <%= UNIQUE_ACCESSORIES %></span>
              <br>
              <span class="stat-name <%= maxTalis %>">Completion: </span>
              <span class="stat-value percent <%= maxTalis %>"><%= Math.round(items.talismans.filter(a => a.isUnique).length / UNIQUE_ACCESSORIES * 100) %></span>
              <br>
              <span class="stat-name <%= maxRecombTalis %>">Recombobulated: </span>
              <span class="stat-value <%= maxRecombTalis %>"><%= items.talismans.filter(a => a.isUnique && a.extra?.recombobulated).length %> / <%= UNIQUE_ACCESSORIES %></span>
            </p>
            <% if(items.talismans.find(a => !a.isInactive) != undefined){ %>
              <div class="accessory-list">
                <p class="stat-sub-header" style="margin-bottom: 5px">Active Accessories</p>
                <% items.talismans.filter(a => !a.isInactive).forEach(item => {
                  %>
                  <div tabindex="0" <% if('backpackIndex' in item){ %>data-backpack-index="<%= item.backpackIndex %>" <% } %> data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>"
                  class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
                <% }) %>
                <p>
                  <%- getEnrichments(items.talismans.filter(a => a.isUnique && !a.isInactive)) %>
                  <%- getReforges(items.talismans.filter(a => a.isUnique && !a.isInactive)) %>
                </p>
                <p><%- getBonus(getStats(items.talismans.filter(a => a.isUnique && !a.isInactive))) %></p>
              </div>
            <% } %>
            <% if(items.talismans.find(a => a.isUnique && a.isInactive) != undefined){ %>
              <div class="accessory-list">
                <p class="stat-sub-header">Inactive Accessories</p>
                <% items.talismans.filter(a => a.isUnique && a.isInactive).forEach(item => { %>
                  <div tabindex="0" <% if('backpackIndex' in item){ %>data-backpack-index="<%= item.backpackIndex %>" <% } %> data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>"
                  class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
                <% }) %>
              </div>
            <% } %>
            <% if(calculated.missingTalismans.missing.length > 0 || calculated.missingTalismans.upgrades.length > 0){ %>
              <% if(items.talismans.length == 1){ %>
                <br>
              <% } %>
              <button class="stat-sub-header extender" aria-controls="missing-accessories" aria-expanded="false">Missing Accessories</button>
              <div class="pieces extendable" id="missing-accessories">
                <br>
                <p class="stat-sub-header">Missing Accessories<span data-tippy-content='Missing accessories that are <strong>not</strong> upgrades of another talisman.'></span></p>
                <% for(const [index, talisman] of calculated.missingTalismans.missing.entries()){ %>
                  <div tabindex="0" data-missing-talisman-index="<%= index %>" class="rich-item piece piece-<%= talisman.rarity %>-bg missing-talisman">
                    <div style='background-image: url("<%= talisman.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
                  </div>
                <% } %>
                <p class="stat-sub-header">Missing Accessory Upgrades<span data-tippy-content='Missing accessories that are upgrades of a lower tier talisman.'></span></p>
                <% for(const [index, talisman] of calculated.missingTalismans.upgrades.entries()){ %>
                  <div tabindex="0" data-upgrade-talisman-index="<%= index %>" class="rich-item piece piece-<%= talisman.rarity %>-bg missing-talisman">
                    <div style='background-image: url("<%= talisman.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
                  </div>
                <% } %>
              </div>
            <% } %>
          <% } %>
        </div>
      </div>
    <% } %>
    <% if(calculated.pets.length > 0){ %>
      <div class="stat-container stat-pets">
        <a class="stat-anchor" id="Pets"></a>
        <h2 class="stat-header">Pets</h2>
        <div class="stat-content">
          <%
            const uniquePets = _.uniq(calculated.pets.map(a => a.type))

            let totalPetXp = 0
            for (const pet of calculated.pets) {
              totalPetXp += pet.exp
            }

            let totalSkins = {}
            for (const [petType, petSkins] of Object.entries(constants.pet_skins)) {
              for (const [skin, skinData] of Object.entries(petSkins)) {
                if (skinData.release < Date.now()) {
                  totalSkins[`${petType}/${skin}`] =
                    calculated.pets.find(
                      (pet) => pet.type === petType && pet.skin === skin
                    ) != undefined;
                }
              }
            }
            let userUniqueSkins = Object.values(totalSkins).filter(skin => skin).length
            let totalUniqueSkins = Object.keys(totalSkins).length

            let totalCandiesUsed = calculated.pets.reduce((total, pet) => total + pet.candyUsed, 0)
          %>
          <p class="stat-raw-values">
            <% max = uniquePets.length >= Object.keys(constants.pet_data).length ? 'golden-text': '' %>
            <span class="stat-name <%= max %>">Unique Pets: </span><span class="stat-value <%= max %>"><%= uniquePets.length %> / <%= Object.keys(constants.pet_data).length %></span><br>

            <% max = userUniqueSkins >= totalUniqueSkins ? 'golden-text': '' %>
            <span class="stat-name <%= max %>">Unique Pet Skins: </span><span class="stat-value <%= max %>"><%= userUniqueSkins %> / <%= totalUniqueSkins %></span><br>

            <% max = calculated.petScore >= Math.max(...Object.keys(constants.pet_rewards)) ? 'golden-text' : '' %>
            <span data-tippy-content="
              Increase your pet score by collecting unique pets with a high rarity.<br><br>
              <table>
              <tr><td>10 Score: </td><td><span class='color-magic-find grey-text'>+1 Magic Find</span></td>
              <tr><td>25 Score: </td><td><span class='color-magic-find grey-text'>+2 Magic Find</span></td>
              <tr><td>50 Score: </td><td><span class='color-magic-find grey-text'>+3 Magic Find</span></td>
              <tr><td>75 Score: </td><td><span class='color-magic-find grey-text'>+4 Magic Find</span></td>
              <tr><td>100 Score: </td><td><span class='color-magic-find grey-text'>+5 Magic Find</span></td>
              <tr><td>130 Score: </td><td><span class='color-magic-find grey-text'>+6 Magic Find</span></td>
              <tr><td>175 Score: </td><td><span class='color-magic-find grey-text'>+7 Magic Find</span></td>
              </table>
            "><span class="stat-name <%= max %>">Pet Score: </span><span class="stat-value <%= max %>"><%= calculated.petScore %></span></span><% if(calculated.pet_score_bonus.magic_find > 0){ %><span class="grey-text color-magic-find"> (+<%= calculated.pet_score_bonus.magic_find %> <abbr title="Magic Find">MF</abbr>)</span><% } %><br>

            <% max = totalCandiesUsed === 0 ? 'golden-text': '' %>
            <span class="stat-name <%= max %>">Total Candies Used: </span><span class="stat-value <%= max %>"><%= totalCandiesUsed %></span><br>

            <span class="stat-name">Total Pet XP: </span><span class="stat-value"><%= helper.formatNumber(totalPetXp, true) %></span>
          </p>
          <%
            const petsToShow = 100
            const petsToShowLimit = 250
            const activePet = calculated.pets.find(pet => pet.active)
            const otherPets = calculated.pets.filter(pet => !pet.active).slice(0, petsToShowLimit)
          %>
          <% if (activePet) { %>
            <p class="stat-sub-header">Active Pet</p>
            <div class="pieces">
              <div tabindex="0" data-pet-index="0" class="active-pet rich-item piece piece-<%= activePet.rarity %>-bg <%= getRarityUpgradeClass(activePet) %>">
                <% if (rarityOrder.indexOf(activePet.rarity) < 3) { %>
                  <div class="piece-shine"></div>
                <% } %>
                <div style='background-image: url("<%= activePet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
              </div>
              <div class="active-pet-info">
                <div class="pet-name piece-<%= activePet.rarity %>-fg"><%= activePet.rarity %> <%- activePet.display_name_print || activePet.display_name %></div>
                <div class="pet-level">Level <%= activePet.level.level %></div>
              </div>
            </div>
            <br>
            <%- getBonus(activePet.stats) %>
          <% } %>
          <% if (otherPets) { %>
            <p class="stat-sub-header"><%= activePet ? 'Other Pets' : '' %></p>
            <div class="pieces">
              <% for(const [index, pet] of otherPets.entries()) { %>

                <% if (
                  (activePet && index === petsToShow - 1) ||
                  (!activePet && index === petsToShow)
                ) { %>
                  </div>
                  <button class="stat-sub-header extender" aria-controls="showmore-pets" aria-expanded="false">Show More Pets</button>
                  <div class="pieces extendable" id="showmore-pets">
                <% } %>

                <div tabindex="0" data-pet-index="<%= activePet ? index + 1 : index %>" class="other-pet rich-item piece piece-<%= pet.rarity %>-bg <%= getRarityUpgradeClass(pet) %>">
                  <% if(rarityOrder.indexOf(pet.rarity) < 3) { %>
                    <div class="piece-shine"></div>
                  <% } %>
                  <div style='background-image: url("<%= pet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
                  <div class="other-pet-level"><abbr title="Level">Lvl</abbr> <%= pet.level.level %></div>
                </div>
              <% } %>
            </div>
          <% } %>
          <% if(calculated.missingPets.length > 0) { %>
            <% if(calculated.pets.length == 1) { %>
              <br>
            <% } %>
            <button class="stat-sub-header extender" aria-controls="missing-pets" aria-expanded="false">Missing Pets</button>
            <div class="pieces extendable" id="missing-pets">
              <% for(const [index, pet] of calculated.missingPets.entries()) { %>
                <div tabindex="0" data-missing-pet-index="<%= index %>" class="rich-item piece piece-<%= pet.rarity %>-bg missing-pet">
                  <div style='background-image: url("<%= pet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
                </div>
              <% } %>
            </div>
          <% } %>
        </div>
      </div>
    <% } %>
    <% if(!items.no_inventory){ %>
      <div class="stat-container stat-inventory">
        <a class="stat-anchor" id="Inventory"></a>
        <h2 class="stat-header">Inventory</h2>
        <div class="stat-content">
          <% if(items.no_inventory){ %>
            <div class="no-access"><%= calculated.display_name %> doesn't have inventory access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
          <% }else{ %>
            <div id="inventory_container">
              <div id="inventory_header">
                <div class="inventory-header-line"></div>
                <div class="inventory-tabs-container">
                  <%
                    const inventoryIconUrl = `https://crafatar.com/renders/head/${extra.isFoolsDay ? 'bd482739767c45dca1f8c33c40530952' : calculated.uuid }?size=32&overlay`
                  %>
                  <button class="inventory-tab active-inventory" data-inventory-type="inventory">
                    <div
                      class="inventory-tab-icon item-icon custom-icon"
                      style="background-image: url('<%= inventoryIconUrl %>')"
                    ></div>
                    <div class="inventory-tab-name"><abbr title="Inventory">Inv</abbr></div>
                  </button>

                  <% if(items.storage.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="storage">
                      <div class="inventory-tab-icon item-icon icon-54_0"></div>
                      <div class="inventory-tab-name">Storage</div>
                    </button>
                  <% } %>

                  <% if(items.enderchest.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="enderchest">
                      <div class="inventory-tab-icon item-icon icon-130_0"></div>
                      <div class="inventory-tab-name"><abbr title="Enderchest">Ender</abbr></div>
                    </button>
                  <% } %>

                  <% if(items.personal_vault.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="personal_vault">
                      <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/f7aadff9ddc546fdcec6ed5919cc39dfa8d0c07ff4bc613a19f2e6d7f2593)"></div>
                      <div class="inventory-tab-name"><abbr title="Personal Vault">Vault</abbr></div>
                    </button>
                  <% } %>

                  <% if(items.talisman_bag.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="talisman_bag">
                      <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/961a918c0c49ba8d053e522cb91abc74689367b4d8aa06bfc1ba9154730985ff)"></div>
                      <div class="inventory-tab-name"><abbr title="Accessory Bag">Accs</abbr></div>
                    </button>
                  <% } %>

                  <% if(items.potion_bag.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="potion_bag">
                      <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/9f8b82427b260d0a61e6483fc3b2c35a585851e08a9a9df372548b4168cc817c)"></div>
                      <div class="inventory-tab-name"><abbr title="Potion Bag">Pots</abbr></div>
                    </button>
                  <% } %>

                  <% if(items.fishing_bag.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="fishing_bag">
                      <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/eb8e297df6b8dffcf135dba84ec792d420ad8ecb458d144288572a84603b1631)"></div>
                      <div class="inventory-tab-name"><abbr title="Fishing Bag">Fish</abbr></div>
                    </button>
                  <% } %>

                  <% if(items.quiver.length > 0){ %>
                    <button class="inventory-tab" data-inventory-type="quiver">
                      <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/4cb3acdc11ca747bf710e59f4c8e9b3d949fdd364c6869831ca878f0763d1787)"></div>
                      <div class="inventory-tab-name">Quiver</div>
                    </button>
                  <% } %>
                </div>
              </div>
              <%- /*html*/`
              <div class="inventory-view" data-inventory-type="inventory">
                ${items.inventory.slice(9).map( item => inventorySlot(item)).join("")}
                <hr>
                ${items.inventory.slice(0,9).map( item => inventorySlot(item)).join("")}
              </div>
              ` %>
            </div>
          <% } %>
        </div>
      </div>
    <% } %>
    <div class="stat-container stat-skills">
      <a class="stat-anchor" id="Skills"></a>
      <h2 class="stat-header">Skills</h2>
      <div class="stat-content">

        <div class="stat-mining">
          <div class="category-header">
            <div class="category-icon"><div class="item-icon icon-274_0"></div></div>
            <span>mining</span>
          </div>

          <% const mining = calculated.mining; %>
          <p class="stat-raw-values">
            <% max = mining.commissions.milestone == 5 ? 'golden-text' : '' %>
            <span class="stat-name <%= max %>">Commissions Milestone: </span><span class="stat-value <%= max %>"><%= mining.commissions.milestone.toLocaleString() %></span><br>
          </p>

          <% if(items.pickaxes.length > 0){ %>
            <p class="stat-sub-header">Mining Pickaxes</p>
            <% if(items.highest_rarity_pickaxe){ %>
              <p class="stat-raw-values">
                <span class="stat-name">Active Pickaxe: </span><span class="stat-active-pickaxe stat-value piece-<%= items.highest_rarity_pickaxe.rarity %>-fg"><%- items.highest_rarity_pickaxe.display_name_print || items.highest_rarity_pickaxe.display_name %></span>
              </p>
            <% }else{ %>
              <p class="stat-raw-values">
                <span class="stat-name">Active Pickaxe: </span><span class="stat-active-pickaxe stat-value piece-common-fg">None</span>
              </p>
            <% } %>
            <div class="pieces">
              <%  items.pickaxes.filter(a => !a.hidden).forEach(item => { %>
                  <div tabindex="0" <% if('backpackIndex' in item){ %>data-backpack-index="<%= item.backpackIndex %>" <% } %> data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
              <% }); %>
            </div>
          <% } %>
        </div>

        <% if(calculated.farming.talked){ %>
        <div class="stat-farming">
          <div class="category-header">
            <div class="category-icon" onclick="window.open('https://www.youtube.com/watch?v=pZaY1jV96jI')"><div class="item-icon icon-294_0"></div></div>
            <span>farming</span>
          </div>

          <% const farming = calculated.farming;
          if (farming.contests.attended_contests > 0) {%>
            <p class="stat-raw-values">
              <span class="stat-name">Contests attended: </span><span class="stat-value"><%= farming.contests.attended_contests.toLocaleString() %></span><br>
              <% max = farming.unique_golds == 10 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Unique Golds: </span><span class="stat-value <%= max %>"><%= farming.unique_golds.toLocaleString() %></span></span><br>
            </p>

            <p class="stat-raw-values">
              <% for(let badge of badgeOrder){ %>
                <span data-tippy-content='
                  <span class="stat-name">Current: </span><span class="stat-value"><%= farming.current_badges[badge].toLocaleString() %> Badges</span><br>
                  <span class="stat-name">Total: </span><span class="stat-value"><%= farming.total_badges[badge].toLocaleString() %> Badges</span>
                '>
                <span class="stat-name"><%= badge %> badges: </span>
                <span class="stat-value"><%= farming.total_badges[badge].toLocaleString() %></span></span><br>
              <% } %>
            </p>
          <% }else{ %>
            <p class="stat-raw-values">
              <%= calculated.display_name %> hasn't attended any contests yet.
            </p>
          <% } %>

          <% if(items.hoes.length > 0){ %>
            <p class="stat-sub-header">Farming Hoes</p>
            <% if(items.highest_rarity_hoe){ %>
              <p class="stat-raw-values">
                <span class="stat-name">Active Hoe: </span><span class="stat-active-hoe stat-value piece-<%= items.highest_rarity_hoe.rarity %>-fg"><%- items.highest_rarity_hoe.display_name_print || items.highest_rarity_hoe.display_name %></span>
              </p>
            <% }else{ %>
              <p class="stat-raw-values">
                <span class="stat-name">Active Hoe: </span><span class="stat-active-hoe stat-value piece-common-fg">None</span>
              </p>
            <% } %>
            <div class="pieces">
              <%  items.hoes.filter(a => !a.hidden).forEach(item => { %>
                  <div tabindex="0" <% if('backpackIndex' in item){ %>data-backpack-index="<%= item.backpackIndex %>" <% } %> data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
              <% }); %>
            </div>
          <% } %>

          <% if(Object.keys(calculated.farming.crops).length > 0){ %>
            <button class="stat-sub-header extender" aria-controls="farming-crops" aria-expanded="false">Farming Crops</button>
            <div class="stat-farming-crops extendable" id="farming-crops">
              <%
              const crops = Object.values(calculated.farming.crops).sort((a, b) => {
                return b.contests - a.contests;
              });

              for(const crop of crops){
                if(!crop.attended) continue;

                let amountsTooltip = '';

                for(let badge of badgeOrder)
                  amountsTooltip += `
                    <span class="stat-name">${helper.titleCase(badge)} Badges: </span>
                    <span class="stat-value">${crop.badges[badge].toLocaleString()}</span><br>
                  `;
              %>
              <div class="chip" data-tippy-content="<%= amountsTooltip %>">
                <div class="chip-icon-wrapper"><div class="item-icon icon-<%= crop.icon %>"></div></div>
                <div class="chip-text">
                  <div class="collection-name <%= crop.unique_gold ? 'max-minion' : '' %>"><span class="stat-name"><%= crop.name %></span></div>
                  <div class="collection-amount">
                    <small class="stat-name">Personal Best: </small><small class="stat-value"><%= helper.formatNumber(crop.personal_best, true) %></small><br>
                    <small class="stat-name">Contests: </small><small class="stat-value"><%= crop.contests.toLocaleString() %></small><br>
                  </div>
                </div>
              </div>
              <% } %>
            </div>
          <% } %>
        </div>
        <% } %>

        <div class="stat-fishing">
          <div class="category-header">
            <div class="category-icon"><div class="item-icon icon-346_0"></div></div>
            <span>fishing</span>
          </div>

          <%
          let totalSeaCreatureKills = 0;

          for(const creature of calculated.kills){
            if(seaCreatures.includes(creature.entityId)) {
              totalSeaCreatureKills += creature.amount;
            }
          }
          %>

          <p class="stat-raw-values">
            <span class="stat-name">Items fished: </span><span class="stat-value"><%= calculated.fishing.total.toLocaleString() %></span><br>
            <span class="stat-name">Treasures fished: </span><span class="stat-value"><%= calculated.fishing.treasure.toLocaleString() %></span><br>
            <span class="stat-name">Large treasures fished: </span><span class="stat-value"><%= calculated.fishing.treasure_large.toLocaleString() %></span><br>
            <span class="stat-name">Sea Creatures killed: </span><span class="stat-value"><%= totalSeaCreatureKills.toLocaleString() %></span><br>
            <%
            if(calculated.fishing.shredder_fished > 0 && calculated.fishing.shredder_bait > 0){

              %>
            <span data-tippy-content='
            <span class="stat-name">Fished with Shredder: </span><span class="stat-value"><%= calculated.fishing.shredder_fished.toLocaleString() %></span><br>
            <span class="stat-name">Bait used with Shredder: </span><span class="stat-value"><%= calculated.fishing.shredder_bait.toLocaleString() %></span><br>
            '><span class="stat-name">Fished with Shredder: </span><span class="stat-value"><%= calculated.fishing.shredder_fished.toLocaleString() %></span></span><br>
            <% } %>
          </p>

          <% if(items.rods.length > 0){ %>
            <%- stat_component({
              name: 'sea_creature_chance',
              percent: true,
              baseExplanation: null
            }); %>

            <p class="stat-sub-header">Fishing Rods</p>
            <% if(items.highest_rarity_rod){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Rod: </span><span class="stat-active-rod stat-value piece-<%= items.highest_rarity_rod.rarity %>-fg"><%- items.highest_rarity_rod.display_name_print || items.highest_rarity_rod.display_name %></span>
            </p>
            <% }else if(items.rods.length > 0){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Rod: </span><span class="stat-active-rod stat-value piece-common-fg">None</span>
            </p>
            <% } %>
            <div class="pieces">
              <%
                let rod = items.rods.slice().sort((a, b) => a.item_index - b.item_index);

                if(items.highest_rarity_rod)
                  rod = [items.highest_rarity_rod];

                items.rods.filter(a => !a.hidden).forEach(item => { %>
                  <div tabindex="0" <% if('backpackIndex' in item){ %>data-backpack-index="<%= item.backpackIndex %>" <% } %> data-item-id="<%= item.itemId %>" data-item-index="<%= item.item_index %>" class="rich-item piece
                    <% if(rod.length > 0 && item.backpackIndex === undefined && item.item_index == rod[0].item_index){ %>piece-selected<% } %>
                    piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                    <% if(rarityOrder.indexOf(item.rarity) < 3){ %>
                      <div class="piece-shine"></div>
                    <% } %>
                    <div class="select-rod"></div>
                    <%- itemIcon(item, ['piece-icon']); %>
                  </div>
              <%
                });
              %>
            </div>
          <% } %>

          <% if(totalSeaCreatureKills > 0){ %>
            <button class="stat-sub-header extender" aria-controls="missing-seacreatures" aria-expanded="false">Sea Creatures</button>
            <div class="sea-creatures extendable" id="missing-seacreatures">
              <% for(const creatureId of seaCreatures) {
                const creature = calculated.kills.find(creature => creature.entityId == creatureId);

                if(creature?.amount > 0 ) {
                  %>
                  <div class="sea-creature">
                    <div class="sea-creature-name"><span><%= creature.entityName %></span></div>
                    <div class="sea-creature-image" style="background-image: url(/resources/img/sea_creatures/<%= creature.entityId %>.webp)"></div>
                    <div class="sea-creature-kills"><span class="stat-value"><%= creature.amount.toLocaleString() %></span><span class="stat-name"> Kill<%= creature.amount != 1 ? 's' : '' %></span></div>
                  </div>
                  <%
                }
              } %>
            </div>
          <% } %>
        </div>

        <% if(calculated.enchanting.experimented){ %>
        <div class="stat-enchanting">
          <div class="category-header">
            <div class="category-icon"><div class="item-icon icon-116_0"></div></div>
            <span>enchanting</span>
          </div>

          <% const enchanting = calculated.enchanting; %>
          <button class="stat-sub-header extender" aria-controls="Experiments" aria-expanded="false">Experiments</button>
          <div class="stat-experiments extendable narrow-info-container-wrapper" id="Experiments">
            <% for(let game in enchanting.experiments){
            const game_data = enchanting.experiments[game]; %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">
                <span><%= game_data.name %></span>
              </div>
              <span>
                <p class="stat-raw-values">
                  <%
                    const game_stats = helper.sortObject(game_data.stats);
                    for(let stat in game_stats){
                  %>
                    <span class="stat-name"><%= helper.titleCase(stat.replace('_', ' ')) %>: </span>
                    <span class="stat-value"><%= (stat == 'last_attempt' || stat == 'last_claimed') ? game_stats[stat].text : game_stats[stat] %></span><br>
                  <% } %>
                </p>
                <%
                for(let tier in game_data.tiers) {
                  const tier_data = game_data.tiers[tier];
                %>
                <%- /*html*/`
                <hr>
                <div class="chip">
                  <div class="chip-icon-wrapper"><div class="item-icon icon-${esc( tier_data.icon.replace(':', '_') )}"></div></div>
                  <div class="chip-text">
                    <div class="collection-name"><span class="stat-name">${esc( tier_data.name )}</span></div>
                    <div class="collection-amount">
                      ${Object.entries(tier_data).filter(([key, value]) => key != 'name' && key != 'icon').map(([key, value]) => {
                        return /*html*/`<small class="stat-name">${esc( helper.titleCase(key.replace('_', ' ')) )}: </small><small class="stat-value">${esc( value )}</small><br>`
                      }).join("")}
                    </div>
                  </div>
                </div>
                ` %>
                <% } %>
              </span>
            </div>
            <% } %>
          </div>
        </div>
        <% } %>

<br>
        <p class='stat-raw-values'><small><i>
        Please note that this section is still in the works and many things are now in development. Thanks for your support!
        </i></small></p>
      </div>
    </div>
    <div class="stat-container stat-dungeons">
      <a class="stat-anchor" id="Dungeons"></a>
      <h2 class="stat-header">Dungeons</h2>
      <div class="stat-content">
      <% if (Object.keys(calculated.dungeons).length === 0 ||
      !(calculated.dungeons.catacombs?.visited || calculated.dungeons.master_catacombs?.visited)) { %>
        <p class="stat-raw-values">
          <%= calculated.display_name %> hasn't entered any dungeon yet.
        </p>
      <% } else { %>
        <%-
          calculated.dungeons.used_classes
          ? /*html*/`
            <p class="stat-sub-header">Classes</p>

            <span class="stat-name">Selected Class: </span>
            <span class="stat-value">${esc(helper.titleCase(calculated.dungeons.selected_class))}</span>
            <div class="skill-bars">
              ${ skill_component('Healer', 'icon-373_0', calculated.dungeons.classes.healer.experience) }
              ${ skill_component('Mage', 'icon-369_0', calculated.dungeons.classes.mage.experience) }
              ${ skill_component('Berserk', 'icon-267_0', calculated.dungeons.classes.berserk.experience) }
              ${ skill_component('Archer', 'icon-261_0', calculated.dungeons.classes.archer.experience) }
              ${ skill_component('Tank', 'icon-299_0', calculated.dungeons.classes.tank.experience) }
            </div>
          `
          : ""
        %>

        <% if (calculated.dungeons.catacombs?.visited) { %>
          <% max = calculated.dungeons.journals.maxed ? "golden-text" : "" %>
          <%- /*html*/`
          <p class="stat-sub-header">Catacombs</p>

          <p class="stat-raw-values">
            <div class="skill-bars">
              ${skill_component('Catacombs', 'head-964e1c3e315c8d8fffc37985b6681c5bd16a6f97ffd07199e8a05efbef103793', calculated.dungeons.catacombs.level)}
            </div>
            <span class="stat-name">Dungeon Item Boost: </span><span class="stat-value percent">${esc( calculated.dungeons.catacombs.bonuses.item_boost )}</span>
          </p>

          <p class="stat-raw-values">
            <span class="stat-name">Highest Floor Beaten: </span><span class="stat-value">${esc( helper.titleCase(calculated.dungeons.catacombs.highest_floor.replace("_", " ")) )}</span><br>
            <span class="stat-name">Secrets Found: </span><span class="stat-value">${esc( calculated.dungeons.secrets_found )}</span><br>
            <span>
              <span class="stat-name ${ max }">Journals Completed: </span>
              <span class="stat-value ${ max }">${esc( calculated.dungeons.journals.journals_completed )}</span>
              <span class="grey-text"> (${esc( calculated.dungeons.journals.pages_collected )}/${esc( calculated.dungeons.journals.total_pages )})</span>
            </span>
          </p>
          ` %>

          <div class="floor-containers narrow-info-container-wrapper">
            <% for (let [id, floor] of Object.entries(calculated.dungeons.catacombs.floors)) { %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(/head/<%= floor.icon_texture %>)"></div>
                <span><%= floor.name.replace("_", " ") %></span>
              </div>
              <span>
                <button class="stat-sub-header extender" aria-controls="floor-<%= id %>" aria-expanded="false">Floor Stats</button>
                <div class="pieces extendable" id="floor-<%= id %>">
                <% for (let [stat, value] of Object.entries(floor.stats)) { %>
                  <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                  <span class="stat-value">
                  <% if(stat.startsWith("fastest_time")) { %>
                    <%= moment.duration(value, "milliseconds").format("m:ss.SSS") %>
                  <% } else { %>
                    <%= helper.formatNumber(value) %>
                  <% } %>
                  </span><br>
                <% } %>
                <% if(floor.most_damage) { %>
                  <span class="stat-name">Most Damage: </span>
                  <span class="stat-value"><%= helper.formatNumber(floor.most_damage.value) %></span>
                  <span class="stat-name">(<%= helper.titleCase(floor.most_damage.class) %>)</span>
                <% } %>
                </div>
                <% if(floor.best_runs) { %>
                  <button class="stat-sub-header extender" aria-controls="runs-<%= id %>" aria-expanded="false">Best Run</button>
                  <div class="pieces extendable" id="runs-<%= id %>">
                    <span class="stat-name">Grade:</span>
                    <span class="stat-value"><%= helper.calcDungeonGrade(floor.best_runs[floor.best_runs.length - 1]) %></span>
                    <br>
                  <% for (let [stat, value] of Object.entries(floor.best_runs[floor.best_runs.length - 1])) {
                    if(stat == "teammates") continue; %>
                    <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                    <span class="stat-value" <%- stat == "timestamp" ? `data-tippy-content='<local-time timestamp="${value}"></local-time>'` : ""%>><%=
                      (() => {
                        switch (stat) {
                          case "timestamp":
                            return moment(value).fromNow();
                          case "elapsed_time":
                            return moment.duration(value, "milliseconds").format("m:ss.SSS");
                          case "dungeon_class":
                            return helper.titleCase(value);
                          default:
                            return helper.formatNumber(value);
                        }
                      })()
                    %></span><br>
                  <% } %>
                  </div>
                <% } %>
              </span>
            </div>
            <% } %>
          </div>
          <br>
        <% } %>

        <% if (calculated.dungeons.master_catacombs?.visited) { %>
          <p class="stat-sub-header">Master Catacombs</p>

          <p class="stat-raw-values">
            <span class="stat-name">Highest Floor Beaten: </span><span class="stat-value"><%= helper.titleCase(calculated.dungeons.master_catacombs.highest_floor.replace("_", " ")) %></span><br>
          </p>

          <div class="floor-containers narrow-info-container-wrapper">
            <% for (let [id, floor] of Object.entries(calculated.dungeons.master_catacombs.floors)) { %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(/head/<%= floor.icon_texture %>)"></div>
                <span><%= floor.name.replace("_", " ") %></span>
              </div>
              <span>
                <button class="stat-sub-header extender" aria-controls="floor-<%= id %>" aria-expanded="false">Floor Stats</button>
                <div class="pieces extendable" id="floor-<%= id %>">
                <% for (let [stat, value] of Object.entries(floor.stats)) { %>
                  <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                  <span class="stat-value">
                  <% if(stat.startsWith("fastest_time")) { %>
                    <%= moment.duration(value, "milliseconds").format("m:ss.SSS") %>
                  <% } else { %>
                    <%= helper.formatNumber(value) %>
                  <% } %>
                  </span><br>
                <% } %>
                <% if(floor.most_damage) { %>
                  <span class="stat-name">Most Damage: </span>
                  <span class="stat-value"><%= helper.formatNumber(floor.most_damage.value) %></span>
                  <span class="stat-name">(<%= helper.titleCase(floor.most_damage.class) %>)</span>
                <% } %>
                </div>
                <% if(floor.best_runs) { %>
                  <button class="stat-sub-header extender" aria-controls="runs-<%= id %>" aria-expanded="false">Best Run</button>
                  <div class="pieces extendable" id="runs-<%= id %>">
                    <span class="stat-name">Grade:</span>
                    <span class="stat-value"><%= helper.calcDungeonGrade(floor.best_runs[floor.best_runs.length - 1]) %></span>
                    <br>
                  <% for (let [stat, value] of Object.entries(floor.best_runs[floor.best_runs.length - 1])) {
                    if(stat == "teammates") continue; %>
                    <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                    <span class="stat-value" <%- stat == "timestamp" ? `data-tippy-content='<local-time timestamp="${value}"></local-time>'` : ""%>><%=
                      (() => {
                        switch (stat) {
                          case "timestamp":
                            return moment(value).fromNow();
                          case "elapsed_time":
                            return moment.duration(value, "milliseconds").format("m:ss.SSS");
                          case "dungeon_class":
                            return helper.titleCase(value);
                          default:
                            return helper.formatNumber(value);
                        }
                      })()
                    %></span><br>
                  <% } %>
                  </div>
                <% } %>
              </span>
            </div>
            <% } %>
          </div>
          <br>
        <% } %>

        <% if (calculated.dungeons.unlocked_collections) { %>
          <p class="stat-sub-header">Boss Collections</p>

          <div class="collections">
          <%
          for(let boss in calculated.dungeons.boss_collections){
            let collection = calculated.dungeons.boss_collections[boss];
            let claimedTooltip = "";
            if (collection.claimed.length > 0) {
              claimedTooltip += '<span class="stat-name">Claimed items:</span>';

              for(let item in collection.claimed)
                claimedTooltip += `<br><span class="stat-value">- ${collection.claimed[item]}</span>`;

              claimedTooltip += '<br>';
            }

            if (collection.unclaimed > 0)
              claimedTooltip += `<span class="stat-name">Unclaimed items: </span><span class="stat-value">${collection.unclaimed}</span>`;
          %>
          <div class="chip" <% if (claimedTooltip != "") { %>data-tippy-content="<%= claimedTooltip %>"<% } %>>
            <div class="chip-icon-wrapper"><div style="background-image:url(/head/<%= collection.texture %>)" class="item-icon custom-icon"></div></div>
            <div class="chip-text">
              <div class="collection-name <%= collection.maxed ? 'max-stat' : '' %>"><span class="stat-name"><%= collection.name %> </span><% if (collection.tier > 0) { %><span class="stat-value"><%= collection.tier %></span><% } %></div>
              <div class="collection-amount"><span class="stat-name">Bosses killed: </span><span class="stat-value"><%= collection.killed.toLocaleString() %></span></div>
            </div>
          </div>
          <% } %>
          </div>
        <% } %>
      <% } %>
      </div>
    </div>
    <div class="stat-container stat-slayer">
      <a class="stat-anchor" id="Slayer"></a>
      <h2 class="stat-header">Slayer</h2>
      <div class="stat-content">
        <% if(calculated.slayer_coins_spent.total == 0 || calculated.slayer_coins_spent.total === undefined){ %>
          <p class="stat-raw-values">
            <%= calculated.display_name %> hasn't played any Slayer yet.
          </p>
        <% }else{ %>
          <p class="stat-raw-values">
            <span data-tippy-content="
            <span class='stat-name'>Approximate coins spent: </span><br><span class='stat-value'><%= calculated.slayer_coins_spent.total.toLocaleString() %> Coins</span><br><br>
            <%
            for(const slayerName of Object.keys(calculated.slayers).sort((a, b) => slayerOrder.indexOf(a) - slayerOrder.indexOf(b))){
              if(!(slayerName in calculated.slayer_coins_spent))
                continue;
            %>
            <span class='stat-name'><%= helper.capitalizeFirstLetter(slayerName) %>: </span><span class='stat-value'><%= calculated.slayer_coins_spent[slayerName].toLocaleString() %> Coins</span><br>
            <% } %>
            "><span class="stat-name">Total Slayer XP: </span><span class="stat-value"><%= calculated.slayer_xp.toLocaleString() %></span></span>
          </p>
          <div class="slayer-containers narrow-info-container-wrapper">
          <%
          let maxSlayerLevel = 0;

          for(const slayerName in calculated.slayers){
            const slayer = calculated.slayers[slayerName];

            if(slayer.level.progress >= 1 && slayer.level.currentLevel < slayer.level.maxLevel){
              slayer.level.unclaimed = true;
            }
          }

          for(const slayerName of Object.keys(calculated.slayers).sort((a, b) => slayerOrder.indexOf(a) - slayerOrder.indexOf(b))){

            const slayer = calculated.slayers[slayerName];

            if(slayer.xp === undefined || slayer.xp == 0)
              continue;

            if(Object.keys(slayer.kills).length == 0)
              slayer.kills['1'] = 0;

            maxSlayerLevel = Math.max(maxSlayerLevel, slayer.level.currentLevel);

            let totalKills = 0;

            for(const tier in slayer.kills)
              totalKills += slayer.kills[tier];

            %>
            <div class="narrow-info-container slayer">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(<%= slayerInfo[slayerName].head %>)"></div>
                <span><%= slayerInfo[slayerName].boss %></span>
              </div>
              <div class="slayer-kills">
                <% for(const [index, tier] of Object.keys(slayer.kills).entries()){ %>
                  <div class="slayer-kill"><div class="tier-name">Tier <%= romanize(tier) %></div><div class="tier-kills"><%= slayer.kills[tier].toLocaleString() %></div></div>
                <% } %>
                <div class="slayer-kill"><div class="tier-name">Total</div><div class="tier-kills"><%= totalKills.toLocaleString() %></div></div>
              </div>
              <% if(slayer.level.unclaimed){ %>
                <div class="slayer-unclaimed">unclaimed slayer rewards!</div>
              <% } %>
              <% max = slayer.level.currentLevel == slayer.level.maxLevel ? 'golden-text' : '' %><span class="<%= max %> stat-name slayer-level"><%= slayerName %> level <span class="stat-value <%= max %>"><%= slayer.level.currentLevel %></span></span>
              <div class="slayer-bar <%= slayer.level.currentLevel == slayer.level.maxLevel ? 'maxed-slayer' : ''%>">
                <div class="skill-progress-bar slayer-progress-bar" style="--progress: <%= slayer.level.currentLevel == slayer.level.maxLevel ? 1 : slayer.level.progress %>"></div>
                <div class="skill-progress-text slayer-progress-text">
                  <%= slayer.level.xp.toLocaleString() %><% if(slayer.level.xpForNext != 0){ %> / <%= slayer.level.xpForNext.toLocaleString() %><% } %> XP
                </div>
              </div>
            </div>
          <% } %>
          <% if(calculated.display_name == "metalcupcake5"){ %>
            <div class="narrow-info-container slayer">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(/head/bb13133a8fb4ef00b71ef9bab639a66fbc7d5cffcc190c1df74bf2161dfd3ec7)"></div>
                <span>Congealed Monstrosity</span>
              </div>
              <div class="slayer-kills">
                  <div class="slayer-kill"><div class="tier-name">Tier I</div><div class="tier-kills">39283</div></div>
                <div class="slayer-kill"><div class="tier-name">Total</div><div class="tier-kills">39283</div></div>
              </div>
              <span class="stat-name slayer-level">Slime level <span class="stat-value">-3</span></span>
              <div class="slayer-bar ">
                <div class="skill-progress-bar slayer-progress-bar" style="--progress: 1.3"></div>
                <div class="skill-progress-text slayer-progress-text">
                  69420 / 1.4b XP
                </div>
              </div>
            </div>
          <% } %>
          </div>
          <% if(maxSlayerLevel > 0){ %>
          <p>
            <%
            const slayerBonus = Object.assign({}, constants.stat_template);

            for(const slayer in calculated.slayer_bonus)
              for(const stat in calculated.slayer_bonus[slayer])
                slayerBonus[stat] += calculated.slayer_bonus[slayer][stat];
            %>
            <%= getBonus(slayerBonus) %>
          </p>
          <% } %>
        <% } %>
      </div>
    </div>
    <div class="stat-container stat-minions">
      <a class="stat-anchor" id="Minions"></a>
      <h2 class="stat-header">Minions</h2>
      <div class="stat-content">
        <%
          let uniqueMinions = 0;
          let maxedMinions = 0;
          let skippedMinions = 0;

          for(const minion of calculated.minions){
            uniqueMinions += minion.levels.length;
            skippedMinions += minion.maxLevel - minion.levels.length;

            if(minion.maxLevel == minion.tiers)
              maxedMinions++;
          }
        %>
        <a href="https://hypixel.net/threads/2166857/" target="_blank" rel="noreferrer" class="external-app">
          <div class="external-app-icon icon-google-sheets"></div>
          <div class="external-app-name">Minions Sheet <span class="grey-text">by TBlazeWarriorT</span></div>
          <div class="external-app-description">Check the next cheapest or fastest Minion upgrades and find out which Minions will earn you the most from Bazaar, for free.</div>
        </a>
        <p class="stat-raw-values">
          <% max = uniqueMinions == constants.minions_max_uniques ? 'golden-text' : '' %><span class="stat-name <%= max %>">Unique Minions: </span><span class="stat-value <%= max %>"><%= uniqueMinions %> / <%= constants.minions_max_uniques %></span><span class="grey-text"> (<%= Math.floor(uniqueMinions / constants.minions_max_uniques * 100) %>%)</span><br>
          <% max = calculated.minion_slots.currentSlots == constants.minions_max_slots ? 'golden-text' : '' %><span class="stat-name <%= max %>">Minion Slots: </span><span class="stat-value <%= max %>""><%= calculated.minion_slots.currentSlots %></span><span class="grey-text"> (<%= calculated.minion_slots.toNextSlot %> to next slot)</span><br>
          <% max = calculated.misc.profile_upgrades.minion_slots == 5 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Bonus Minion Slots: </span><span class="stat-value <%= max %>""><%= calculated.misc.profile_upgrades.minion_slots %> / <%= constants.profile_upgrades['minion_slots'] %></span><br>
          <% max = maxedMinions == _.size(constants.minions) ? 'golden-text' : '' %><span class="stat-name <%= max %>">Maxed Minions: </span><span class="stat-value <%= max %>"><%= maxedMinions %> / <%= _.size(constants.minions) %></span><br>
          <% if(skippedMinions > 0){ %>
          <span class="stat-name">Skipped Minion Tiers: </span><span class="stat-value"><%= skippedMinions %></span><br>
          <% } %>
        </p>
        <%
        for(const type of constants.minion_types){
          const minions = calculated.minions.filter(a => a.type == type && a.maxLevel > 0).sort((a, b) => b.maxLevel - a.maxLevel);

          const totalOfType = _.size(_.pickBy(constants.minions, a => a.type == type));
          const maxOfType = minions.filter(a => a.maxLevel == a.tiers).length;

          if(minions.length == 0)
            continue;

          %>
          <div class="category-header">
            <div class="category-icon"><div class="item-icon <%= skillItems[type] %>"></div></div>
            <span><%= type %></span>
            <% if(maxOfType >= totalOfType){ %>
              <span class="category-header-maxed">max!</span>
            <% }else{ %>
              <span class="category-header-detail">(<%= maxOfType %> / <%= totalOfType %> max)</span>
            <% } %>
          </div>
          <div class="minions">
            <% for(const minion of minions){ %>
              <div data-tippy-content="Crafted variants:<br><br>
              <% for(let i = 1; i <= minion.tiers; i++){ %>
              <div class='minion-variant <% if(minion.levels.includes(i)){ %>minion-crafted<% } %>'><%= romanize(i) %></div>
              <% } %>
              " class="chip
              <%= minion.maxLevel == 0 ? 'no-minion' : '' %>
              <%= minion.maxLevel == minion.tiers ? 'max-stat' : '' %>
              <%= minion.maxLevel != minion.levels.length ? 'skipped-minion' : '' %>
              ">
                <div class="chip-icon-wrapper"><div style="background-image: url(<%= minion.head %>)" class="item-icon custom-icon"></div></div>
                <div class="chip-text">
                  <span class="stat-name"><%= minion.name %> </span><span class="stat-value"><%= minion.maxLevel %></span>
                </div>
              </div>
            <% } %>
          </div>
          <%
        } %>
      </div>
    </div>
    <% if(Object.keys(calculated.collections).length > 0){ %>
      <div class="stat-container stat-collections">
        <a class="stat-anchor" id="Collections"></a>
        <h2 class="stat-header">Collections</h2>
        <div class="stat-content">
          <p class="stat-raw-values">
            <%
            let maxCollections = 0;
            for(const collection of constants.collection_data)
              if(collection.skyblockId in calculated.collections
              && calculated.collections[collection.skyblockId].tier >= collection.maxTier)
                maxCollections++;
            %>
            <% max = maxCollections == constants.collection_data.length ? 'golden-text' : '' %><span class="stat-name <%= max %>">Maxed Collections: </span><span class="stat-value <%= max %>"><%= maxCollections %> / <%= constants.collection_data.length %></span>
          </p>
          <% for(const type of constants.collection_types){
            const collections = [];

            const totalOfType = constants.collection_data.filter(a => a.type == type).length;
            let maxOfType = 0;

            for(const collection of constants.collection_data.filter(a => a.type == type))
              if(collection.skyblockId in calculated.collections)
                collections.push(Object.assign(collection, calculated.collections[collection.skyblockId]));

            for(const collection of collections)
              if(collection.tier >= collection.maxTier)
                maxOfType++;

            if(collections.length == 0)
              continue;

            %>
            <div class="category-header">
              <div class="category-icon"><div class="item-icon <%= skillItems[type] %>"></div></div>
              <span><%= type %></span>
              <% if(maxOfType >= totalOfType){ %>
                <span class="category-header-maxed">max!</span>
              <% }else{ %>
                <span class="category-header-detail">(<%= maxOfType %> / <%= totalOfType %> max)</span>
              <% } %>
            </div>
            <div class="collections">
              <%

              for(const collection of collections){
                let amountsTooltip = '';

                for(const [index, amount] of collection.amounts.entries()){
                  amountsTooltip += `<span class="stat-name">${amount.username}: </span><span class="stat-value">${amount.amount.toLocaleString()}</span>`;

                  if(index < collection.amounts.length)
                    amountsTooltip += '<br>';
                }

                amountsTooltip += `<br><span class="stat-name">Total: </span><span class="stat-value">${collection.totalAmount.toLocaleString()}</span>`;
              %>
                <div class="chip" data-tippy-content="<%= amountsTooltip %>">
                  <div class="chip-icon-wrapper">
                    <% if ("texture" in collection) { %>
                      <div style="background-image:url(/head/<%= collection.texture %>)" class="item-icon custom-icon"></div>
                    <% } else { %>
                      <div class="item-icon icon-<%= collection.id %>_<%= collection.damage %>"></div>
                    <% } %>
                  </div>
                  <div class="chip-text">
                    <div class="collection-name <%= collection.tier >= collection.maxTier ? 'max-stat' : '' %>"><span class="stat-name"><%= collection.name %> </span><span class="stat-value"><%= collection.tier %></span></div>
                    <div class="collection-amount"><span class="stat-name">Amount: </span><span class="stat-value"><%= collection.amount.toLocaleString() %></span></div>
                  </div>
                </div>
              <% } %>
            </div>
          <% } %>
        </div>
      </div>
    <% } %>
    <% if(Object.keys(calculated.misc).length > 0){ %>
      <div class="stat-container stat-misc">
        <a class="stat-anchor" id="Misc"></a>
        <h2 class="stat-header">Miscellaneous</h2>
        <div class="stat-content">
        <% if(calculated.kills.length > 0 || calculated.deaths.length > 0){
          let totalKills = calculated.kills.length;
          let totalDeaths = calculated.deaths.length;

          let rows = Math.min(Math.max(totalKills, totalDeaths), 10);

          %>
          <div class="category-header"><div class="category-icon"><div class="item-icon icon-267_0"></div></div><span>kills</span></div>
          <p class="stat-raw-values stat-kills">
            <span class="stat-name">Total Kills: </span><span class="stat-value"><%= calculated.kills.map(a => a.amount).reduce((a, b) => a + b, 0).toLocaleString() %></span><br>
            <span class="stat-name">Total Deaths: </span><span class="stat-value"><%= calculated.deaths.map(a => a.amount).reduce((a, b) => a + b, 0).toLocaleString() %></span><br>

            <div class="kills-deaths-container narrow-info-container-wrapper">
              <div class="narrow-info-container top-kills">
                <div class="narrow-info-header">Kills</div>
                <div class="narrow-info-content">
                  <% for(let i = 0; i < rows; i++){
                    const kill = calculated.kills[i];

                    if(typeof calculated.kills[i] === 'undefined'){
                    %>
                      <div class="kill-stat"><div class="kill-rank"></div></div>
                    <% }else{ %>
                      <div class="kill-stat"><div class="kill-rank">#<%= i + 1 %>&nbsp;</div><div class="kill-entity"><%= kill.entityName %></div><div class="stat-separator">:&nbsp;</div><div class="kill-amount"><%= kill.amount.toLocaleString() %></div></div>
                    <% }
                  } %>
                  <% if(calculated.kills.length > 10 || calculated.deaths.length > 10){ %>
                    <button class="kill-stat show-all <%= calculated.kills.length > 10 ? 'enabled' : '' %>" data-type="kills">show all</button>
                  <% } %>
                </div>
              </div>
              <div class="narrow-info-container top-deaths">
                <div class="narrow-info-header">Deaths</div>
                <div class="narrow-info-content">
                  <% for(let i = 0; i < rows; i++){
                    const death = calculated.deaths[i];

                    if(typeof death === 'undefined'){
                    %>
                      <div class="kill-stat"><div class="kill-rank"></div></div>
                    <% }else{ %>
                      <div class="kill-stat"><div class="kill-rank">#<%= i + 1 %>&nbsp;</div><div class="kill-entity"><%= death.entityName %></div><div class="stat-separator">:&nbsp;</div><div class="kill-amount"><%= death.amount.toLocaleString() %></div></div>
                    <% }
                  } %>
                  <% if(calculated.kills.length > 10 || calculated.deaths.length > 10){ %>
                    <button class="kill-stat show-all <%= calculated.deaths.length > 10 ? 'enabled' : '' %>" data-type="deaths">show all</button>
                  <% } %>
                </div>
              </div>
            </div>
          </p>
          <% } %>

          <% if('races' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-317_0"></div></div><span>races</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.races){
                if(key.startsWith('dungeon_hub'))
                  continue;

                const raceName = helper.capitalizeFirstLetter(key.split("_").join(" "));
                let raceDuration = moment.duration(calculated.misc.races[key], "milliseconds").format("m:ss.SSS");

                if(calculated.misc.races[key] < 1000)
                  raceDuration = '0.' + raceDuration;
              %>
              <span class="stat-name"><%= raceName %>: </span><span class="stat-value"><%= raceDuration %></span><br>
              <% } %>
            </p>
            <div class="race-containers narrow-info-container-wrapper">
              <%
              const races = [
                { id: "dungeon_hub_crystal_core", name: "Crystal Core", icon: '399_0' },
                { id: "dungeon_hub_giant_mushroom", name: "Giant Mushroom", icon: '100_0' },
                { id: "dungeon_hub_precursor_ruins", name: "Precursor Ruins", icon: '98_1' }
              ];

              const types = ["anything", "no_pearls", "no_abilities", "nothing"];

              for(const race of races){
                const times = Object.keys(calculated.misc.races).filter(a => a.startsWith(race.id));

                if(times.length > 0){
                %>
                <div class="narrow-info-container">
                  <div class="narrow-info-header"><%= race.name %></div>
                  <div class="narrow-info-content">
                    <%
                    const races_no_return = times.filter(a => a.includes("no_return"));
                    const races_with_return = times.filter(a => a.includes("with_return"));

                    if(races_no_return.length > 0){ %>
                      <div class="narrow-info-section-header">No Return:</div>
                    <% }

                    for(const type of types){
                      const duration = calculated.misc.races[`${race.id}_${type}_no_return_best_time`] || 0;

                      if(duration == 0)
                        continue;

                      let raceDuration = moment.duration(duration, "milliseconds").format("m:ss.SSS");

                      if(duration < 1000)
                        raceDuration = '0.' + raceDuration;
                      %>
                      <div><span class="stat-name"><%= helper.titleCase(type.replace("_", " ")) %>: </span><span class="stat-value"><%= raceDuration %></span></div>
                    <% }

                    if(races_with_return.length > 0){ %>
                      <div class="narrow-info-section-header">With Return:</div>
                    <% }

                    for(const type of types){
                      const duration = calculated.misc.races[`${race.id}_${type}_with_return_best_time`] || 0;

                      if(duration == 0)
                        continue;

                      let raceDuration = moment.duration(duration, "milliseconds").format("m:ss.SSS");

                      if(duration < 1000)
                        raceDuration = '0.' + raceDuration;
                      %>
                      <div><span class="stat-name"><%= helper.titleCase(type.replace("_", " ")) %>: </span><span class="stat-value"><%= raceDuration %></span></div>
                    <% } %>
                  </div>
                </div>
                <%
                }
              }
              %>
            </div>
          <% } %>
          <% if('gifts' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon custom-icon" style="background-image: url(/head/b73a2114136b8ee4926caa51785414036a2b76e4f1668cb89d99716c421)"></div></div><span>gifts</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.gifts){ %>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.gifts[key].toLocaleString() %></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('winter' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-332_0"></div></div><span>season of jerry</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.winter){ %>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.winter[key].toLocaleString() %></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('dragons' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon custom-icon" style="background-image: url(/head/aec3ff563290b13ff3bcc36898af7eaa988b6cc18dc254147f58374afe9b21b9)"></div></div><span>dragons</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.dragons){
                let tooltip = "";

                if(key == 'last_hits')
                  for(const kill of calculated.kills.filter(a => a.entityId.endsWith('_dragon')))
                    tooltip += `<span class="stat-name">${ kill.entityName }: </span><span class="stat-value">${ kill.amount }</span> <span class="grey-text">(${ Math.round(kill.amount / calculated.misc.dragons[key] * 100) }%)</span><br>`;

                if(key == 'deaths')
                  for(const death of calculated.deaths.filter(a => a.entityId.endsWith('_dragon')))
                    tooltip += `<span class="stat-name">${ death.entityName }: </span><span class="stat-value">${ death.amount }</span><br>`;
              %>
              <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.dragons[key].toLocaleString() %></span></span><br>
              <% } %>
          </p>
          <% } %>
          <% if('protector' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon custom-icon" style="background-image: url(https://sky.lea.moe/head/89091d79ea0f59ef7ef94d7bba6e5f17f2f7d4572c44f90f76c4819a714)"></div></div><span>Endstone Protectors</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.protector){ %>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.protector[key].toLocaleString() %></span><br>
              <% } %>
          </p>
          <% } %>
          <% if('damage' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-267_0"></div></div><span>damage</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.damage){ %>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= Math.floor(calculated.misc.damage[key]).toLocaleString() %></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('milestones' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon custom-icon" style="background-image: url(/head/93c8aa3fde295fa9f9c27f734bdbab11d33a2e43e855accd7465352377413b)"></div></div><span>pet milestones</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.milestones){
                let progress = {
                  rarity: milestone_rarities[pet_milestones[key].length-1],
                  maxed: true
                };
                let tooltip = "";

                for(let i = 0; i < pet_milestones[key].length; i++){
                  if(calculated.misc.milestones[key] < pet_milestones[key][i]){
                    progress = {
                      percentage: Math.round(calculated.misc.milestones[key]/pet_milestones[key][i]*100),
                      rarity: milestone_rarities[i],
                      maxed: false
                    };
                    break;
                  }
                }

                tooltip += `<span class="stat-name">Rarity: </span><span class="stat-value piece-${ progress.rarity }-fg">${ helper.capitalizeFirstLetter(progress.rarity) }</span><br><span class="stat-name">Progress: </span>`;
                if(progress.maxed)
                  tooltip += `<span class="stat-value golden-text">Maxed!</span>`;
                else
                  tooltip += `<span class="stat-value percent">${ progress.percentage.toLocaleString() }</span>`;
                %>
              <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>>
                <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.milestones[key].toLocaleString() %></span></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('burrows' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon custom-icon" style="background-image: url(/head/4c27e3cb52a64968e60c861ef1ab84e0a0cb5f07be103ac78da67761731f00c8)"></div></div><span>griffin burrows</span></div>
            <p class="stat-raw-values">
              <%  let burrow_naming = {"dug_next": "dug_arrows", "dug_combat": "dug_monsters"}
              for(const key in calculated.misc.burrows){
                let name = burrow_naming[key] || key;
                let tooltip = "";

                for(const rarity in calculated.misc.burrows[key])
                  if(rarity != "total" && rarity != "null")
                    tooltip += `<span class="stat-name piece-${ rarity }-fg">${ helper.capitalizeFirstLetter(rarity) }: </span><span class="stat-value">${ calculated.misc.burrows[key][rarity] }</span><br>`;
              %>
                <span <%- tooltip ? `data-tippy-content='<span class="stat-name">Rarities used:</span><br>${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(name.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.burrows[key].total.toLocaleString() %></span></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('profile_upgrades' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-154_0"></div></div><span>profile upgrades</span></div>
            <p class="stat-raw-values">
              <% for(const upgrade in constants.profile_upgrades){ %>
              <% max = calculated.misc.profile_upgrades[upgrade] == constants.profile_upgrades[upgrade] ? 'golden-text' : '' %><span class="stat-name <%= max %>"><%= helper.capitalizeFirstLetter(upgrade.split("_").join(" ")); %>: </span><span class="stat-value <%= max %>""><%= calculated.misc.profile_upgrades[upgrade] %> / <%= constants.profile_upgrades[upgrade] %></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('auctions_sell' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-266_0"></div></div><span>auctions sold</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.auctions_sell){
                let tooltip = "";

                if(key == 'items_sold')
                  for(const key of Object.keys(calculated.auctions_sold).sort((a, b) => rarityOrder.indexOf(a) - rarityOrder.indexOf(b)))
                    tooltip += `<span class="stat-name piece-${ key }-fg">${ helper.capitalizeFirstLetter(key) }: </span><span class="stat-value">${ calculated.auctions_sold[key] }</span><br>`;
              %>
              <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.auctions_sell[key].toLocaleString() %></span></span><br>
              <% } %>
            </p>
          <% } %>
          <% if('auctions_buy' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-264_0"></div></div><span>auctions bought</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.auctions_buy){
                let tooltip = "";

                if(key == 'items_bought')
                  for(const key of Object.keys(calculated.auctions_bought).sort((a, b) => rarityOrder.indexOf(a) - rarityOrder.indexOf(b)))
                    tooltip += `<span class="stat-name piece-${ key }-fg">${ helper.capitalizeFirstLetter(key) }: </span><span class="stat-value">${ calculated.auctions_bought[key] }</span><br>`;
              %>
              <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.auctions_buy[key].toLocaleString() %></span></span><br>
              <% } %>
            </p>
          <% } %>

          <% if('claimed_items' in calculated.misc){ %>
            <div class="category-header"><div class="category-icon"><div class="item-icon icon-339_0"></div></div><span>claimed items</span></div>
            <p class="stat-raw-values">
              <% for(const key in calculated.misc.claimed_items){
                let timestamp = calculated.misc.claimed_items[key];
              %>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span>
              <span class="stat-value" data-tippy-content='Claimed on <local-time timestamp="<%= timestamp %>"></local-time>'><%= moment(timestamp).fromNow() %></span><br>
              <% } %>
            </p>
          <% } %>
        </div>
      </div>
    <% } %>
    </div>
  </main>
  <%- footer %>
  <script>
    const items = JSON.parse(`<%- JSON.stringify(items).replace(/\\/g, '\\\\') %>`);
    const calculated = JSON.parse(`<%- JSON.stringify(calculated).replace(/\\/g, '\\\\') %>`);
    <%
      const clientConstants = {
        special_enchants: constants.special_enchants,
        max_favorites: constants.max_favorites
      }
    %>
    const constants = JSON.parse(`<%- JSON.stringify(clientConstants).replace(/\\/g, '\\\\') %>`);
  </script>
</body>
</html>
